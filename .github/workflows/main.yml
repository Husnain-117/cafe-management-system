name: Cafe Management System Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}
  ARTIFACT_DIR: ${{ github.workspace }}/artifacts

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Convert repository owner to lowercase
        run: |
          echo "OWNER_LC=${IMAGE_PREFIX,,}" >> $GITHUB_ENV
          echo "Using lowercase owner: ${{ env.OWNER_LC }}"

      # Build each service with proper error handling
      - name: Build Services
        run: |
          # Function to build a service
          build_service() {
            local service=$1
            local path=$2
            echo "Building $service from $path..."
            if [ ! -d "$path" ]; then
              echo "Directory $path does not exist!"
              exit 1
            fi
            docker build -t ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/$service:latest $path || {
              echo "Failed to build $service"
              exit 1
            }
          }

          # Build all services
          build_service "api-gateway" "./api-gateway"
          build_service "menu-service" "./menu-services"
          build_service "order-service" "./order-services"
          build_service "payment-service" "./payment-services"
          build_service "inventory-service" "./inventory-services"
          build_service "customer-service" "./customer-services"

      - name: List built images
        run: |
          echo "Listing all built Docker images:"
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER_LC }}" || true

      # Start services and test with proper error handling
      - name: Start and test services
        run: |
          echo "Starting services..."
          docker compose up -d || {
            echo "Failed to start services"
            docker compose logs
            exit 1
          }
          
          echo "Waiting for services to start..."
          sleep 45  # Increased wait time

          # Function to test a service
          test_service() {
            local service=$1
            local port=$2
            echo "Testing $service on port $port..."
            for i in {1..3}; do
              if curl -f http://localhost:$port/health; then
                echo "$service is healthy"
                return 0
              fi
              echo "Attempt $i failed, retrying in 10s..."
              sleep 10
            done
            echo "Failed to test $service after 3 attempts"
            return 1
          }

          # Test all services
          test_service "API Gateway" "3000"
          test_service "Menu Service" "3001"
          test_service "Order Service" "3002"
          test_service "Payment Service" "3003"
          test_service "Inventory Service" "3004"
          test_service "Customer Service" "3005"

      # Push images if on main branch
      - name: Push images
        if: github.ref == 'refs/heads/main'
        run: |
          # Function to push a service
          push_service() {
            local service=$1
            echo "Pushing $service..."
            docker push ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/$service:latest || {
              echo "Failed to push $service"
              exit 1
            }
          }

          # Push all services
          push_service "api-gateway"
          push_service "menu-service"
          push_service "order-service"
          push_service "payment-service"
          push_service "inventory-service"
          push_service "customer-service"

      # Create organized artifact directory structure
      - name: Create artifacts directory structure
        if: always()
        run: |
          # Create main directories
          mkdir -p ${{ env.ARTIFACT_DIR }}/{logs,docker,system,tests}
          
          # Create subdirectories for different types of logs
          mkdir -p ${{ env.ARTIFACT_DIR }}/logs/{services,build,test}
          mkdir -p ${{ env.ARTIFACT_DIR }}/docker/{images,compose,network}
          mkdir -p ${{ env.ARTIFACT_DIR }}/system/{info,resources}
          
          echo "Created artifact directory structure at ${{ env.ARTIFACT_DIR }}"
          ls -R ${{ env.ARTIFACT_DIR }}

      # Collect detailed logs for each service
      - name: Collect service logs
        if: always()
        run: |
          # All services combined
          echo "=== Service Logs ===" > ${{ env.ARTIFACT_DIR }}/logs/services/all_services.log
          docker compose logs --timestamps --tail=1000 >> ${{ env.ARTIFACT_DIR }}/logs/services/all_services.log

          # Individual service logs
          for service in api-gateway menu-service order-service payment-service inventory-service customer-service; do
            echo "=== $service Logs ===" > ${{ env.ARTIFACT_DIR }}/logs/services/${service}.log
            docker compose logs --timestamps $service >> ${{ env.ARTIFACT_DIR }}/logs/services/${service}.log
          done

      # Collect Docker-related information
      - name: Collect Docker information
        if: always()
        run: |
          # Docker images
          echo "=== Docker Images ===" > ${{ env.ARTIFACT_DIR }}/docker/images/images.log
          docker images --all --digests >> ${{ env.ARTIFACT_DIR }}/docker/images/images.log 2>&1
          
          # Docker compose status
          echo "=== Docker Compose Status ===" > ${{ env.ARTIFACT_DIR }}/docker/compose/status.log
          docker compose ps --all >> ${{ env.ARTIFACT_DIR }}/docker/compose/status.log 2>&1
          
          # Docker network information
          echo "=== Docker Network Info ===" > ${{ env.ARTIFACT_DIR }}/docker/network/network.log
          docker network ls >> ${{ env.ARTIFACT_DIR }}/docker/network/network.log 2>&1
          docker network inspect cafe-network >> ${{ env.ARTIFACT_DIR }}/docker/network/network.log 2>&1

      # Collect system information
      - name: Collect system information
        if: always()
        run: |
          # System info
          echo "=== System Information ===" > ${{ env.ARTIFACT_DIR }}/system/info/system.log
          uname -a >> ${{ env.ARTIFACT_DIR }}/system/info/system.log 2>&1
          
          # Resource usage
          echo "=== Resource Usage ===" > ${{ env.ARTIFACT_DIR }}/system/resources/usage.log
          df -h >> ${{ env.ARTIFACT_DIR }}/system/resources/usage.log 2>&1
          free -h >> ${{ env.ARTIFACT_DIR }}/system/resources/usage.log 2>&1
          top -b -n 1 >> ${{ env.ARTIFACT_DIR }}/system/resources/usage.log 2>&1

      # Create summary file
      - name: Create summary
        if: always()
        run: |
          {
            echo "# Workflow Run Summary"
            echo "## Build Information"
            echo "- Run ID: ${{ github.run_id }}"
            echo "- Run Number: ${{ github.run_number }}"
            echo "- Workflow: ${{ github.workflow }}"
            echo "- Repository: ${{ github.repository }}"
            echo "- Branch: ${{ github.ref }}"
            echo "- Commit: ${{ github.sha }}"
            echo "## Directory Structure"
            echo '```'
            ls -R ${{ env.ARTIFACT_DIR }}
            echo '```'
          } > ${{ env.ARTIFACT_DIR }}/summary.md

      # Upload all artifacts with proper retention
      - name: Upload workflow artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: workflow-artifacts
          path: ${{ env.ARTIFACT_DIR }}
          retention-days: 5
          if-no-files-found: error

      # Clean up
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker compose down
          docker system prune -f 